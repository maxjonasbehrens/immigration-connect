})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c(input$year), form %in% c(input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(filteredData())
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c(input$year), form %in% c(input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("month", "Month", 1, 12,
value = 1, step = 1, sep = ""
),
selectInput("year", "Year",choices = levels(viz_data$year), multiple = TRUE
),
selectInput("form", "Type of Form",choices = levels(viz_data$form), multiple = TRUE),
checkboxInput("legend", "Show legend", TRUE)
)
)
shinyApp(ui, server)
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c(input$year), form %in% c(input$form))
})
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c(input$year), form %in% c(input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
source('~/Documents/GitHub/immigration-connect/uscis-processing-time/uscis_viz_processingTime/data_manipulation.R', echo=TRUE)
X2019_01_28_processing_time <- read_csv("2019-01-28-processing-time.csv")
source('~/Documents/GitHub/immigration-connect/uscis-processing-time/uscis_viz_processingTime/data_manipulation.R', echo=TRUE)
runApp()
viz_data <- read_csv("viz_data.csv")
runApp()
runApp()
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("month", "Month", 1, 12,
value = 1, step = 1, sep = ""
),
selectInput("year", "Year", choices = levels(viz_data$year), multiple = TRUE
),
selectInput("form", "Type of Form",choices = levels(viz_data$form), multiple = TRUE),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
# Color Function
getColor <- function(data) {
upper_bound = mean(data$time_mean)+sd(data$time_mean)/2
lower_bound = mean(data$time_mean)-sd(data$time_mean)/2
sapply(data$time_mean, function(time_mean){
if (time_mean < lower_bound){
"green"
} else if (time_mean < upper_bound) {
"orange"
} else {
"red"
} })
}
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("month", "Month", 1, 12,
value = 1, step = 1, sep = ""
),
selectInput("year", "Year", choices = levels(viz_data$year), multiple = TRUE
),
selectInput("form", "Type of Form",choices = levels(viz_data$form), multiple = TRUE),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(filteredData())
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(filteredData())
)
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
runApp()
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
})
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(viz_data)
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
# Color Function
getColor <- function(data) {
for (i in data$time_mean){
if (i < 10){
"green"
} else if (i < 20) {
"orange"
} else {
"red"
} }
}
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("month", "Month", 1, 12,
value = 1, step = 1, sep = ""
),
selectInput("year", "Year", choices = levels(viz_data$year), multiple = TRUE
),
selectInput("form", "Type of Form",choices = levels(viz_data$form), multiple = TRUE),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(filteredData())
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icons, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
runApp()
# Color Function
getColor <- function(data) {
upper_bound = mean(data$time_mean)+sd(data$time_mean)/2
lower_bound = mean(data$time_mean)-sd(data$time_mean)/2
sapply(data$time_mean, function(time_mean){
if (time_mean < lower_bound){
"green"
} else if (time_mean < upper_bound) {
"orange"
} else {
"red"
} })
}
runApp()
runApp()
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
viz_data %>%
filter(month %in% c(input$month), year %in% c("2016",input$year), form %in% c("I-12",input$form))
})
# Color Function
getColor <- function(data) {
upper_bound = mean(data$time_mean)+sd(data$time_mean)/2
lower_bound = mean(data$time_mean)-sd(data$time_mean)/2
sapply(data$time_mean, function(time_mean){
if (time_mean < lower_bound){
"green"
} else if (time_mean < upper_bound) {
"orange"
} else {
"red"
} })
}
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
icons <- reactive({
awesomeIcons(
icon = 'ios-time',
iconColor = 'black',
library = 'ion',
markerColor = getColor(filteredData())
)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(viz_data) %>% addTiles() %>%
fitBounds(~min(LNG), ~min(LAT), ~max(LNG), ~max(LAT))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
icon <- icons()
leafletProxy("map", data = filteredData()) %>%
addAwesomeMarkers(lng = ~LNG, lat = ~LAT, icon = icon, label = ~paste("Min: ",time_min,"Max:",time_max))
})
}
shinyApp(ui, server)
runApp()
